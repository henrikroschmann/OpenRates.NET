name: Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  CONFIGURATION: Release

jobs:
  build:
    name: Build, Test & Analyze
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for GitVersion
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
    
    - name: Run unit tests
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: Code Coverage Report
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/**/coverage.cobertura.xml
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true
    
    - name: Verify code coverage threshold
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"coveragereport" -reporttypes:"Html;TextSummary"
        cat coveragereport/Summary.txt || echo "Coverage report not generated"
        # Extract line coverage percentage and fail if below 85%
        COVERAGE=$(grep -oP 'Line coverage: \K[0-9.]+' coveragereport/Summary.txt | head -1 || echo "0")
        if (( $(echo "$COVERAGE < 85.0" | bc -l) )); then
          echo "⚠️  Code coverage $COVERAGE% is below minimum threshold of 85%"
          echo "Note: This is a warning. Fix coverage before release."
        else
          echo "✅ Code coverage $COVERAGE% meets minimum threshold"
        fi
      continue-on-error: true
    
    - name: Static Code Analysis
      run: dotnet format --verify-no-changes --verbosity diagnostic
      continue-on-error: true
    
    - name: Security Scan - Dependencies
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerabilities.txt
        if grep -q "has the following vulnerable packages" vulnerabilities.txt; then
          echo "⚠️  Vulnerable dependencies found"
          cat vulnerabilities.txt
          echo "Please update vulnerable packages before release"
        else
          echo "✅ No vulnerable dependencies found"
        fi
      continue-on-error: true
    
    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/bin/${{ env.CONFIGURATION }}/**
          coverage/**
        retention-days: 7
